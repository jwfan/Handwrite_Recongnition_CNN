function [output, act_h, act_a] = Forward(W, b, X)
% [OUT, act_h, act_a] = Forward(W, b, X) performs forward propogation on the
% input data 'X' uisng the network defined by weights and biases 'W' and 'b'
% (as generated by InitializeNetwork(..)).
%
% This function should return the final softmax output layer activations in OUT,
% as well as the hidden layer post activations in 'act_h', and the hidden layer
% pre activations in 'act_a'.
% Output layer
C = size(b{end},1);
% Data layer
N = size(X,1);
% Hidden layers size
H = size(W{1},1);
L=length(W);

assert(size(X,2) == 1, 'X must be of size [N,1]');
assert(size(W{1},2) == N, 'W{1} must be of size [H,N]');
assert(size(b{1},2) == 1, 'b{end} must be of size [H,1]');
assert(size(W{end},1) == C, 'W{end} must be of size [C,H]');

% Your code here

act_a=cell(L,1);
act_h=cell(L,1);


for i=1:L
   act_a{i}=W{i}*X+b{i};
   act_h{i}=1.0 ./(1+exp(-act_a{i}));
   X=act_h{i};
   %softmax output
   if i==L
       x=act_a{L};
       output=exp(act_a{i})/ sum(exp(x));
       act_h{L}=output;
   end
end


assert(all(size(act_a{1}) == [H,1]), 'act_a{1} must be of size [H,1]');
assert(all(size(act_h{end}) == [C,1]), 'act_h{end} must be of size [C,1]');
assert(all(size(output) == [C,1]), 'output must be of size [C,1]');
end
